/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP
#define CDTSAMP

#include <stdint.h>
#include "params.h"


// Sigma = 7.64, 128-bit precision

#define CDT_ROWS 100
#define CDT_COLS 4

static const int32_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x00000000L, 0x00000000L, 0x00000000L, 0x00000000L, // 0
    0x06AF10C6L, 0x43FC6301L, 0x050DF88DL, 0x79AE2881L, // 1
    0x13F001E8L, 0x64807574L, 0x1AE4F7CCL, 0x484D5359L, // 2
    0x20DADE09L, 0x65E7F455L, 0x758E196AL, 0x55415606L, // 3
    0x2D3B153FL, 0x48A967A1L, 0x099C94F4L, 0x29F1490FL, // 4
    0x38E2E84AL, 0x1BFA7BA4L, 0x10152D98L, 0x5F093D65L, // 5
    0x43AD567EL, 0x1665304AL, 0x63D148B2L, 0x1A51F433L, // 6
    0x4D7F5C10L, 0x66DA39E5L, 0x3006A5E6L, 0x546B66DBL, // 7
    0x56487261L, 0x43BCB8DCL, 0x467301E6L, 0x2DF6962BL, // 8
    0x5E02575EL, 0x450E8E9FL, 0x4A6B8B72L, 0x27DBD089L, // 9
    0x64B0327FL, 0x2B9606C6L, 0x422D7686L, 0x1EADD3C0L, // 10
    0x6A5D3AFAL, 0x2C48EDA5L, 0x15446334L, 0x637CC558L, // 11
    0x6F1B0A9AL, 0x093445CBL, 0x53BB377DL, 0x2C602B35L, // 12
    0x72FFCA96L, 0x58EB902CL, 0x70A1075EL, 0x64E88679L, // 13
    0x7624649FL, 0x145332EDL, 0x0F78B33AL, 0x128D5A11L, // 14
    0x78A2DAF6L, 0x4635A4ECL, 0x177D65C9L, 0x3A5AF440L, // 15
    0x7A94E0C4L, 0x2598BA39L, 0x5D2798D8L, 0x181225E9L, // 16
    0x7C12C111L, 0x2E8586A2L, 0x6D9608CDL, 0x73C77DD4L, // 17
    0x7D3298DCL, 0x6AF1EEB2L, 0x5C1614F1L, 0x262524CEL, // 18
    0x7E07E04CL, 0x65A63A30L, 0x6E98CF4CL, 0x2488A2E3L, // 19
    0x7EA338E7L, 0x46F038A5L, 0x72F38283L, 0x2CD934FEL, // 20
    0x7F127324L, 0x456E5E68L, 0x7E6B10BEL, 0x6F96729BL, // 21
    0x7F60BC54L, 0x49FF9A50L, 0x5D3537F7L, 0x32171EE2L, // 22
    0x7F96E66EL, 0x448D815AL, 0x3607A62AL, 0x7FDDB6DAL, // 23
    0x7FBBBD26L, 0x78D6BCC9L, 0x0AD1A77FL, 0x4F5B28FBL, // 24
    0x7FD45E4BL, 0x45ED7DF2L, 0x2F0421F5L, 0x2363861AL, // 25
    0x7FE48E26L, 0x42C20744L, 0x610AE88AL, 0x1881A8FDL, // 26
    0x7FEF034EL, 0x56861333L, 0x4413E32CL, 0x210FCE75L, // 27
    0x7FF5A784L, 0x3EFE0273L, 0x2DF43395L, 0x7ECEE08AL, // 28
    0x7FF9CCF2L, 0x2CF16A8CL, 0x417E9601L, 0x28BE91A1L, // 29
    0x7FFC5855L, 0x302F4DC2L, 0x7485CF77L, 0x78816DC5L, // 30
    0x7FFDE14AL, 0x5ADAD990L, 0x3D860989L, 0x7A4AD7FFL, // 31
    0x7FFECA52L, 0x5140F5C0L, 0x6C88CD30L, 0x5DC932C5L, // 32
    0x7FFF522AL, 0x57EA12D8L, 0x6B19850EL, 0x1F49A06DL, // 33
    0x7FFFA002L, 0x688DD7EAL, 0x79D77DA0L, 0x674CC925L, // 34
    0x7FFFCBDCL, 0x3EB9E4ABL, 0x259710D1L, 0x21BC48CBL, // 35
    0x7FFFE424L, 0x4B367450L, 0x2F42F706L, 0x2FC02C52L, // 36
    0x7FFFF15CL, 0x1BCF8202L, 0x744CFC54L, 0x30527132L, // 37
    0x7FFFF86EL, 0x608C0D2CL, 0x00D2C379L, 0x7A178884L, // 38
    0x7FFFFC27L, 0x0BEFF6E6L, 0x78238CB7L, 0x1A7909F0L, // 39
    0x7FFFFE13L, 0x41A44029L, 0x461F544DL, 0x546EC5C2L, // 40
    0x7FFFFF0DL, 0x6666B71BL, 0x58045DEEL, 0x1D6D8D56L, // 41
    0x7FFFFF8AL, 0x6D7523E3L, 0x745753D5L, 0x435B3199L, // 42
    0x7FFFFFC8L, 0x237952F9L, 0x6E2ED77EL, 0x33DC0865L, // 43
    0x7FFFFFE5L, 0x77627771L, 0x0417A4D2L, 0x2B342482L, // 44
    0x7FFFFFF4L, 0x00FB4220L, 0x6F6DD88CL, 0x45551F0BL, // 45
    0x7FFFFFFAL, 0x4985B5CFL, 0x3B6B4BC3L, 0x1E2C199AL, // 46
    0x7FFFFFFDL, 0x4B049F25L, 0x60B464B4L, 0x470F0879L, // 47
    0x7FFFFFFEL, 0x78D06A4EL, 0x47601D2AL, 0x14469220L, // 48
    0x7FFFFFFFL, 0x45D64744L, 0x4BD4ADE3L, 0x64691D3FL, // 49
    0x7FFFFFFFL, 0x676466A3L, 0x22931400L, 0x610FA801L, // 50
    0x7FFFFFFFL, 0x75C322ADL, 0x063B549AL, 0x2A2992B1L, // 51
    0x7FFFFFFFL, 0x7BCFCC94L, 0x2A090BCBL, 0x480C48CDL, // 52
    0x7FFFFFFFL, 0x7E50AD58L, 0x3E9C67C5L, 0x41EA1183L, // 53
    0x7FFFFFFFL, 0x7F556269L, 0x5371CA93L, 0x66DEF644L, // 54
    0x7FFFFFFFL, 0x7FBDA34EL, 0x02084E57L, 0x5CE1FA78L, // 55
    0x7FFFFFFFL, 0x7FE69E8FL, 0x642B7E1EL, 0x022F0D91L, // 56
    0x7FFFFFFFL, 0x7FF67490L, 0x49A80E6AL, 0x43C34C56L, // 57
    0x7FFFFFFFL, 0x7FFC787DL, 0x7A3C1279L, 0x2A893B91L, // 58
    0x7FFFFFFFL, 0x7FFEB780L, 0x5878C11DL, 0x38563AA5L, // 59
    0x7FFFFFFFL, 0x7FFF8A90L, 0x5A7C93B8L, 0x15B18600L, // 60
    0x7FFFFFFFL, 0x7FFFD6B8L, 0x5D76DBACL, 0x4A643F92L, // 61
    0x7FFFFFFFL, 0x7FFFF1BBL, 0x6E5D3C4EL, 0x68823600L, // 62
    0x7FFFFFFFL, 0x7FFFFB26L, 0x7AA5CDE9L, 0x6CEE546BL, // 63
    0x7FFFFFFFL, 0x7FFFFE61L, 0x2D4EE325L, 0x26FD2ACBL, // 64
    0x7FFFFFFFL, 0x7FFFFF77L, 0x64C739E6L, 0x49B97911L, // 65
    0x7FFFFFFFL, 0x7FFFFFD4L, 0x00A2F885L, 0x26FC5DA0L, // 66
    0x7FFFFFFFL, 0x7FFFFFF2L, 0x03B06AB8L, 0x1F5035D9L, // 67
    0x7FFFFFFFL, 0x7FFFFFFBL, 0x51A42CF7L, 0x472B2139L, // 68
    0x7FFFFFFFL, 0x7FFFFFFEL, 0x54987C0BL, 0x0F0A330CL, // 69
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x4C446432L, 0x6992AA28L, // 70
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x70A612A7L, 0x1984379DL, // 71
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7B857273L, 0x153426D2L, // 72
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7EB71F93L, 0x0E651F74L, // 73
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FA340CCL, 0x4130BEA7L, // 74
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FE648E4L, 0x62866634L, // 75
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FF8FD7DL, 0x3060333EL, // 76
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFE1F11L, 0x58C9D636L, // 77
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFF8148L, 0x0F10A62EL, // 78
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFDF2CL, 0x4F07017AL, // 79
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFF7A3L, 0x6BEAD616L, // 80
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFDE8L, 0x11CB6B01L, // 81
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFF7CL, 0x0BBC2614L, // 82
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFE0L, 0x09D99D3AL, // 83
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFF8L, 0x33CBF144L, // 84
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFEL, 0x1C9714FFL, // 85
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x4BB43228L, // 86
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x742D4095L, // 87
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7D5F4204L, // 88
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7F6CFF4EL, // 89
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FE06BA6L, // 90
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FF954A1L, // 91
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFE9D81L, // 92
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFB7A4L, // 93
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFF17AL, // 94
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFD22L, // 95
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFF71L, // 96
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFE5L, // 97
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFBL, // 98
    0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, 0x7FFFFFFFL, // 99
}; // cdt_v

// memory requirements:
//     2048 samples: 42960 bytes
//     1024 samples: 22480 bytes
//      512 samples: 12240 bytes
//      256 samples:  7120 bytes
//      128 samples:  4560 bytes
//       64 samples:  3280 bytes
//       32 samples:  2640 bytes
// table alone: 1600 bytes

#endif 