/*************************************************************************************
* qTESLA: an efficient post-quantum signature scheme based on the R-LWE problem
*
* Abstract: CDT constants for the Gaussian sampler
**************************************************************************************/

#ifndef CDTSAMP
#define CDTSAMP

#include <stdint.h>
#include "params.h"


// Sigma = 7.64, 128-bit precision

#define CDT_ROWS 101
#define CDT_COLS 2

static const int64_t cdt_v[CDT_ROWS*CDT_COLS] = {
    0x0000000000000000LL, 0x0000000000000000LL, // 0
    0x06AF10C687F8C602LL, 0x0A1BF11BE6B8A206LL, // 1
    0x13F001E8C900EAE8LL, 0x35C9EF9921354D65LL, // 2
    0x20DADE09CBCFE8ABLL, 0x6B1C32D555055819LL, // 3
    0x2D3B153F9152CF42LL, 0x133929E8A7C5243CLL, // 4
    0x38E2E84A37F4F748LL, 0x202A5B317C24F597LL, // 5
    0x43AD567E2CCA6095LL, 0x47A291646947D0CFLL, // 6
    0x4D7F5C10CDB473CALL, 0x600D4BCD51AD9B6ELL, // 7
    0x56487261877971B9LL, 0x0CE603CCB7DA58ABLL, // 8
    0x5E02575E8A1D1D3FLL, 0x14D716E49F6F4223LL, // 9
    0x64B0327F572C0D8DLL, 0x045AED0C7AB74F02LL, // 10
    0x6A5D3AFA5891DB4ALL, 0x2A88C6698DF31561LL, // 11
    0x6F1B0A9A12688B97LL, 0x27766EFAB180ACD5LL, // 12
    0x72FFCA96B1D72059LL, 0x61420EBD93A219E6LL, // 13
    0x7624649F28A665DALL, 0x1EF166744A356846LL, // 14
    0x78A2DAF68C6B49D8LL, 0x2EFACB92E96BD0FFLL, // 15
    0x7A94E0C44B317473LL, 0x3A4F31B0604897A6LL, // 16
    0x7C12C1115D0B0D45LL, 0x5B2C119BCF1DF74FLL, // 17
    0x7D3298DCD5E3DD65LL, 0x382C29E298949339LL, // 18
    0x7E07E04CCB4C7461LL, 0x5D319E9892228B8BLL, // 19
    0x7EA338E78DE0714BLL, 0x65E70506B364D3F8LL, // 20
    0x7F1273248ADCBCD1LL, 0x7CD6217DBE59CA6CLL, // 21
    0x7F60BC5493FF34A1LL, 0x3A6A6FEEC85C7B8ALL, // 22
    0x7F96E66E891B02B4LL, 0x6C0F4C55FF76DB6ALL, // 23
    0x7FBBBD26F1AD7992LL, 0x15A34EFF3D6CA3EDLL, // 24
    0x7FD45E4B8BDAFBE4LL, 0x5E0843EA8D8E186ALL, // 25
    0x7FE48E2685840E89LL, 0x4215D1146206A3F4LL, // 26
    0x7FEF034EAD0C2667LL, 0x0827C658843F39D7LL, // 27
    0x7FF5A7847DFC04E6LL, 0x5BE8672BFB3B8229LL, // 28
    0x7FF9CCF259E2D519LL, 0x02FD2C02A2FA4686LL, // 29
    0x7FFC5855605E9B85LL, 0x690B9EEFE205B714LL, // 30
    0x7FFDE14AB5B5B320LL, 0x7B0C1313E92B5FFELL, // 31
    0x7FFECA52A281EB81LL, 0x59119A617724CB14LL, // 32
    0x7FFF522AAFD425B1LL, 0x56330A1C7D2681B5LL, // 33
    0x7FFFA002D11BAFD5LL, 0x73AEFB419D332495LL, // 34
    0x7FFFCBDC7D73C956LL, 0x4B2E21A286F1232DLL, // 35
    0x7FFFE424966CE8A0LL, 0x5E85EE0CBF00B14BLL, // 36
    0x7FFFF15C379F0405LL, 0x6899F8A8C149C4C8LL, // 37
    0x7FFFF86EC1181A58LL, 0x01A586F3E85E2210LL, // 38
    0x7FFFFC2717DFEDCDLL, 0x7047196E69E427BFLL, // 39
    0x7FFFFE1383488053LL, 0x0C3EA89B51BB1708LL, // 40
    0x7FFFFF0DCCCD6E37LL, 0x3008BBDC75B63558LL, // 41
    0x7FFFFF8ADAEA47C7LL, 0x68AEA7AB0D6CC663LL, // 42
    0x7FFFFFC846F2A5F3LL, 0x5C5DAEFCCF702193LL, // 43
    0x7FFFFFE5EEC4EEE2LL, 0x082F49A4ACD09208LL, // 44
    0x7FFFFFF401F68441LL, 0x5EDBB11915547C2BLL, // 45
    0x7FFFFFFA930B6B9ELL, 0x76D6978678B06667LL, // 46
    0x7FFFFFFD96093E4BLL, 0x4168C9691C3C21E5LL, // 47
    0x7FFFFFFEF1A0D49DLL, 0x0EC03A54511A4883LL, // 48
    0x7FFFFFFF8BAC8E89LL, 0x17A95BC791A474FELL, // 49
    0x7FFFFFFFCEC8CD46LL, 0x45262801843EA003LL, // 50
    0x7FFFFFFFEB86455ALL, 0x0C76A934A8A64AC5LL, // 51
    0x7FFFFFFFF79F9928LL, 0x5412179720312335LL, // 52
    0x7FFFFFFFFCA15AB0LL, 0x7D38CF8B07A8460FLL, // 53
    0x7FFFFFFFFEAAC4D3LL, 0x26E395279B7BD911LL, // 54
    0x7FFFFFFFFF7B469CLL, 0x04109CAF7387E9E2LL, // 55
    0x7FFFFFFFFFCD3D1FLL, 0x4856FC3C08BC3647LL, // 56
    0x7FFFFFFFFFECE921LL, 0x13501CD50F0D3158LL, // 57
    0x7FFFFFFFFFF8F0FBLL, 0x747824F2AA24EE46LL, // 58
    0x7FFFFFFFFFFD6F01LL, 0x30F1823AE158EA96LL, // 59
    0x7FFFFFFFFFFF1521LL, 0x34F9277056C617FFLL, // 60
    0x7FFFFFFFFFFFAD71LL, 0x3AEDB7592990FE4ALL, // 61
    0x7FFFFFFFFFFFE377LL, 0x5CBA789DA208D802LL, // 62
    0x7FFFFFFFFFFFF64DLL, 0x754B9BD3B3B951ABLL, // 63
    0x7FFFFFFFFFFFFCC2LL, 0x5A9DC64A9BF4AB2CLL, // 64
    0x7FFFFFFFFFFFFEEFLL, 0x498E73CD26E5E445LL, // 65
    0x7FFFFFFFFFFFFFA8LL, 0x0145F10A9BF17681LL, // 66
    0x7FFFFFFFFFFFFFE4LL, 0x0760D5707D40D764LL, // 67
    0x7FFFFFFFFFFFFFF7LL, 0x234859EF1CAC84E7LL, // 68
    0x7FFFFFFFFFFFFFFDLL, 0x2930F8163C28CC31LL, // 69
    0x7FFFFFFFFFFFFFFFLL, 0x1888C865A64AA89FLL, // 70
    0x7FFFFFFFFFFFFFFFLL, 0x614C254E6610DE74LL, // 71
    0x7FFFFFFFFFFFFFFFLL, 0x770AE4E654D09B48LL, // 72
    0x7FFFFFFFFFFFFFFFLL, 0x7D6E3F2639947DD2LL, // 73
    0x7FFFFFFFFFFFFFFFLL, 0x7F46819904C2FA9ELL, // 74
    0x7FFFFFFFFFFFFFFFLL, 0x7FCC91C98A1998D1LL, // 75
    0x7FFFFFFFFFFFFFFFLL, 0x7FF1FAFAC180CCF9LL, // 76
    0x7FFFFFFFFFFFFFFFLL, 0x7FFC3E23632758DBLL, // 77
    0x7FFFFFFFFFFFFFFFLL, 0x7FFF02903C4298B7LL, // 78
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFBE593C1C05EALL, // 79
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFEF47AFAB585ALL, // 80
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFBD0472DAC07LL, // 81
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFEF82EF09850LL, // 82
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFC0276674E9LL, // 83
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFF0CF2FC511LL, // 84
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFC725C53FBLL, // 85
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFF2ED0C89FLL, // 86
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFD0B50253LL, // 87
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFF57D0813LL, // 88
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFDB3FD3ALL, // 89
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFF81AE97LL, // 90
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFE55287LL, // 91
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFA7605LL, // 92
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFEDE90LL, // 93
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFC5EBLL, // 94
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFF48ALL, // 95
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFDC7LL, // 96
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFF93LL, // 97
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFEBLL, // 98
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFCLL, // 99
    0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, // 100
}; // cdt_v

// memory requirements:
//     1024 samples: 22500 bytes
//      512 samples: 12260 bytes
//      256 samples:  7140 bytes
//      128 samples:  4580 bytes
//       64 samples:  3300 bytes
//       32 samples:  2660 bytes
// table alone: 1616 bytes

#endif